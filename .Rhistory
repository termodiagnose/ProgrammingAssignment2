if (!is.null(verso)) {
message("Obtendo dados no cache")
return(verso)
}
makeCacheMatrix <- function(x = matrix()) {
verso <- NULL
set <- function(y) {
x <<- y
verso <<- NULL
}
get <- function() x
setInverse <- function(inverse) verso <<- inverse
getInverse <- function() verso
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
# Função que calcula o inverso da "matriz" especial devolvida por
# makeCacheMatrix acima. Se o inverso já tiver sido calculado (e a
# matriz não mudou), então o "cachesolve" vai devolver o inverso do cache
cacheSolve <- function(x, ...) {    # Devolve a matrix inversa de x
verso <- x$getInverse()
if (!is.null(verso)) {
message("Obtendo dados no cache")
return(verso)
}
mat <- x$get()
verso <- solve(mat, ...)
x$setInverse(verso)
verso
}
obj <- x$get()
makeCacheMatrix <- function(x = matrix()) {
verso <- NULL
set <- function(y) {
x <<- y
verso <<- NULL
}
get <- function() x
setInverse <- function(inverse) verso <<- inverse
getInverse <- function() verso
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
# Função que calcula o inverso da "matriz" especial devolvida por
# makeCacheMatrix acima. Se o inverso já tiver sido calculado (e a
# matriz não mudou), então o "cachesolve" vai devolver o inverso do cache
cacheSolve <- function(x, ...) {    # Devolve a matrix inversa de x
verso <- x$getInverse()
if (!is.null(verso)) {
message("Obtendo dados no cache")
return(verso)
}
obj <- x$get()
verso <- solve(obj, ...)
x$setInverse(verso)
verso
}
verso <- solve(obj, ...)
# Exercise Statement
# Matrix inversion is usually a costly computation and there may be some
# benefit to caching the inverse of a matrix rather than compute it
# repeatedly (there are also alternatives to matrix inversion that we
# will not discuss here). Your assignment is to write a pair of functions
# that cache the inverse of a matrix.
# makeCacheMatrix: esta função cria um objeto "matriz" especial que
# pode armazenar seu inverso (verso)
makeCacheMatrix <- function(x = matrix()) {
verso <- NULL
set <- function(y) {
x <<- y
verso <<- NULL
}
get <- function() x
setInverse <- function(inverse) verso <<- inverse
getInverse <- function() verso
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
# Função que calcula o inverso da "matriz" especial devolvida por
# makeCacheMatrix acima. Se o inverso já tiver sido calculado (e a
# matriz não mudou), então o "cachesolve" vai devolver o inverso do cache
cacheSolve <- function(x, ...) {    # Devolve a matrix inversa de x
verso <- x$getInverse()
if (!is.null(verso)) {
message("Obtendo dados no cache")
return(verso)
}
obj <- x$get()
verso <- solve(obj, ...)
x$setInverse(verso)
verso
}
